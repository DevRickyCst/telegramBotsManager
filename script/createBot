#!/usr/bin/env python3

import argparse
import os

from chalicelib.src.telegram import TelegramInterface


def create_config(bot_name, bot_id, bot_user_id):
    return f"""config = {{
    "bot_name": "{bot_name}",
    "bot_id": "{bot_id}",
    "bot_user_id": "{bot_user_id}",
}}
"""


def create_blueprint(bot_name):
    return f"""from chalice import Blueprint, Response
from chalicelib.src.telegram import TelegramInterface
from chalicelib.bots.{bot_name}.config import config
from chalicelib.src.message import MessageInterface

bot_name = config["bot_name"]
bot_id = config["bot_id"]

app_{bot_name} = Blueprint(__name__)

message = MessageInterface()
telegram = TelegramInterface(bot_id)

@app_{bot_name}.route(f"/{bot_name}", methods=["POST", "GET"])
def index():
    params = app_{bot_name}.current_request.json_body
    [user, chat, date, text] = message.get_data_from_request(params)
    print(f"{bot_name} app called by {{user['username']}}.")
    print(params)
    return Response({{"ok": True}})
"""


def get_parser():
    parser = argparse.ArgumentParser(
        description="Script in order to create new architecture for a bot"
    )
    parser.add_argument(
        "--bot_name",
        help='The bot name (python folder)',
        metavar="Bot Name",
        type=str,
        required=True,
    )
    parser.add_argument(
        "--bot_id",
        help='The bot id (e.g. "6656*******axlpvMs)',
        metavar="Bot Id",
        type=str,
    )
    parser.add_argument(
        "--bot_user_id",
        help='The bot user id (bot username in TL)',
        metavar="Bot private key",
        type=str,
    )
    # other arguments here ...
    return parser


if __name__ == "__main__":
    parser = get_parser()
    args = vars(parser.parse_args())

    bot_name = args["bot_name"]
    bot_id = args["bot_id"]
    bot_user_id = args["bot_user_id"]

    print(f"Executing createBot script with args : {args}")


    path = f"./chalicelib/bots/{bot_name}"
    if not os.path.exists(path):
        print(f"Creating directory : {path}")
        os.makedirs(path)

        print(f"Creating file : {path}/config.py")
        with open(path + "/config.py", "w") as blueprintFiler:
            blueprintFiler.write(create_config(bot_name, bot_id, bot_user_id))

        print(f"Creating file : {path}/blueprint.py")
        with open(path + "/blueprint.py", "w") as configFile:
            configFile.write(create_blueprint(bot_name))

        #Setting webhook
        telegram = TelegramInterface(bot_id)
        telegram.setWebhook(extra_url=bot_name, _bot_id= bot_id)

    else:
        print(f"Directory {path} already exist")
